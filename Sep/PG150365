from collections import deque

def solution(n, m, x, y, r, c, k):
    dist = abs(x - r) + abs(y - c)
    if dist > k or (k - dist) % 2 != 0:
        return "impossible"

    path = ""
    cx, cy = x, y
    directions = [('d', 1, 0), ('l', 0, -1), ('r', 0, 1), ('u', -1, 0)]

    for _ in range(k):
        for d, dx, dy in directions:
            nx, ny = cx + dx, cy + dy
            if 1 <= nx <= n and 1 <= ny <= m:
                rem = k - len(path) - 1
                if abs(nx - r) + abs(ny - c) <= rem:
                    path += d
                    cx, cy = nx, ny
                    break
    return path

print(solution(3, 4, 2, 3, 3, 1, 5))